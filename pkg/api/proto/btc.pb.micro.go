// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api/proto/btc.proto

package btcAPI

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for BTCService service

type BTCService interface {
	GetBlock(ctx context.Context, in *BlockRequest, opts ...client.CallOption) (*RawResponse, error)
	GetBlocks(ctx context.Context, in *BlockRequest, opts ...client.CallOption) (*RawResponse, error)
	GetTx(ctx context.Context, in *TxRequest, opts ...client.CallOption) (*RawResponse, error)
	GetTxs(ctx context.Context, in *TxsRequest, opts ...client.CallOption) (*RawResponse, error)
	GetOutputs(ctx context.Context, in *OutputRequest, opts ...client.CallOption) (*RawResponse, error)
	GetBalance(ctx context.Context, in *BalanceRequest, opts ...client.CallOption) (*RawResponse, error)
	GetBalanceJournal(ctx context.Context, in *BalanceJournalRequest, opts ...client.CallOption) (*RawResponse, error)
}

type bTCService struct {
	c    client.Client
	name string
}

func NewBTCService(name string, c client.Client) BTCService {
	return &bTCService{
		c:    c,
		name: name,
	}
}

func (c *bTCService) GetBlock(ctx context.Context, in *BlockRequest, opts ...client.CallOption) (*RawResponse, error) {
	req := c.c.NewRequest(c.name, "BTCService.GetBlock", in)
	out := new(RawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTCService) GetBlocks(ctx context.Context, in *BlockRequest, opts ...client.CallOption) (*RawResponse, error) {
	req := c.c.NewRequest(c.name, "BTCService.GetBlocks", in)
	out := new(RawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTCService) GetTx(ctx context.Context, in *TxRequest, opts ...client.CallOption) (*RawResponse, error) {
	req := c.c.NewRequest(c.name, "BTCService.GetTx", in)
	out := new(RawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTCService) GetTxs(ctx context.Context, in *TxsRequest, opts ...client.CallOption) (*RawResponse, error) {
	req := c.c.NewRequest(c.name, "BTCService.GetTxs", in)
	out := new(RawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTCService) GetOutputs(ctx context.Context, in *OutputRequest, opts ...client.CallOption) (*RawResponse, error) {
	req := c.c.NewRequest(c.name, "BTCService.GetOutputs", in)
	out := new(RawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTCService) GetBalance(ctx context.Context, in *BalanceRequest, opts ...client.CallOption) (*RawResponse, error) {
	req := c.c.NewRequest(c.name, "BTCService.GetBalance", in)
	out := new(RawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bTCService) GetBalanceJournal(ctx context.Context, in *BalanceJournalRequest, opts ...client.CallOption) (*RawResponse, error) {
	req := c.c.NewRequest(c.name, "BTCService.GetBalanceJournal", in)
	out := new(RawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BTCService service

type BTCServiceHandler interface {
	GetBlock(context.Context, *BlockRequest, *RawResponse) error
	GetBlocks(context.Context, *BlockRequest, *RawResponse) error
	GetTx(context.Context, *TxRequest, *RawResponse) error
	GetTxs(context.Context, *TxsRequest, *RawResponse) error
	GetOutputs(context.Context, *OutputRequest, *RawResponse) error
	GetBalance(context.Context, *BalanceRequest, *RawResponse) error
	GetBalanceJournal(context.Context, *BalanceJournalRequest, *RawResponse) error
}

func RegisterBTCServiceHandler(s server.Server, hdlr BTCServiceHandler, opts ...server.HandlerOption) error {
	type bTCService interface {
		GetBlock(ctx context.Context, in *BlockRequest, out *RawResponse) error
		GetBlocks(ctx context.Context, in *BlockRequest, out *RawResponse) error
		GetTx(ctx context.Context, in *TxRequest, out *RawResponse) error
		GetTxs(ctx context.Context, in *TxsRequest, out *RawResponse) error
		GetOutputs(ctx context.Context, in *OutputRequest, out *RawResponse) error
		GetBalance(ctx context.Context, in *BalanceRequest, out *RawResponse) error
		GetBalanceJournal(ctx context.Context, in *BalanceJournalRequest, out *RawResponse) error
	}
	type BTCService struct {
		bTCService
	}
	h := &bTCServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&BTCService{h}, opts...))
}

type bTCServiceHandler struct {
	BTCServiceHandler
}

func (h *bTCServiceHandler) GetBlock(ctx context.Context, in *BlockRequest, out *RawResponse) error {
	return h.BTCServiceHandler.GetBlock(ctx, in, out)
}

func (h *bTCServiceHandler) GetBlocks(ctx context.Context, in *BlockRequest, out *RawResponse) error {
	return h.BTCServiceHandler.GetBlocks(ctx, in, out)
}

func (h *bTCServiceHandler) GetTx(ctx context.Context, in *TxRequest, out *RawResponse) error {
	return h.BTCServiceHandler.GetTx(ctx, in, out)
}

func (h *bTCServiceHandler) GetTxs(ctx context.Context, in *TxsRequest, out *RawResponse) error {
	return h.BTCServiceHandler.GetTxs(ctx, in, out)
}

func (h *bTCServiceHandler) GetOutputs(ctx context.Context, in *OutputRequest, out *RawResponse) error {
	return h.BTCServiceHandler.GetOutputs(ctx, in, out)
}

func (h *bTCServiceHandler) GetBalance(ctx context.Context, in *BalanceRequest, out *RawResponse) error {
	return h.BTCServiceHandler.GetBalance(ctx, in, out)
}

func (h *bTCServiceHandler) GetBalanceJournal(ctx context.Context, in *BalanceJournalRequest, out *RawResponse) error {
	return h.BTCServiceHandler.GetBalanceJournal(ctx, in, out)
}
